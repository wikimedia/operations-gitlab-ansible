# GitLab crontab

{% if gitlab_backup_enable == "true" or gitlab_backup_enable_partial == "true" %}
# Backups

# documentation on backing up and restoring can be found here:
# https://docs.gitlab.com/ee/raketasks/backup_restore.html

# Possible parts to SKIP are:
#
# db            Database
# uploads       Attachments
# builds        CI job output logs
# artifacts     CI job artifacts
# lfs           LFS objects
# registry      Container Registry images
# pages         Pages content
# repositories  Git repositories data + Wiki data
#
# tar           Leave backup archives in the intermediate directory, skip tar creatio
{% if gitlab_backup_enable == "true" %}

# Full Backup
4 0 * * *     root  /usr/bin/gitlab-backup create CRON=1 STRATEGY=copy GZIP_RSYNCABLE={{ gitlab_backup_gzip_rsyncable }} SKIP=builds,artifacts,registry GITLAB_BACKUP_MAX_CONCURRENCY={{ gitlab_backup_max_concurrency }} GITLAB_BACKUP_MAX_STORAGE_CONCURRENCY={{ gitlab_backup_max_storage_concurrency }} && ls -t {{ gitlab_backup_path }}/*gitlab_backup.tar | head -n1 | xargs -i cp {} {{ gitlab_backup_path }}/latest/latest.tar
{% endif %}
{% if gitlab_backup_enable_partial == "true" %}

# Partial Backup
7 19 * * *    root  /usr/bin/gitlab-backup create CRON=1 STRATEGY=copy GZIP_RSYNCABLE={{ gitlab_backup_gzip_rsyncable }} SKIP=uploads,builds,artifacts,lfs,registry,pages GITLAB_BACKUP_MAX_CONCURRENCY={{ gitlab_backup_max_concurrency }} GITLAB_BACKUP_MAX_STORAGE_CONCURRENCY={{ gitlab_backup_max_storage_concurrency }}
{% endif %}
{% if gitlab_backup_enable_config == "true" %}

# Configuration and secrets backup
0 0 * * *     root  /usr/bin/gitlab-ctl backup-etc >/dev/null && (find /etc/gitlab/config_backup/ -maxdepth 1 -type f -name 'gitlab_config*.tar' -mtime +{{ gitlab_backup_config_keep_num | int }} | xargs -d '\n' -r rm --) && ls -t /etc/gitlab/config_backup/gitlab_config*.tar | head -n1 | xargs -i cp {} /etc/gitlab/config_backup/latest/latest.tar
{% endif %}
{% endif %}
