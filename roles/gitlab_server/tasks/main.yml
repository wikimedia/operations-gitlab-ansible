---
- name: Include OS-specific variables
  include_vars: "{{ ansible_os_family }}.yml"

- name: Check if GitLab configuration file already exists
  stat:
    path: /etc/gitlab/gitlab.rb
  register: gitlab_config_file

- name: Check if GitLab is already installed
  stat:
    path: /usr/bin/gitlab-ctl
  register: gitlab_file

# Install GitLab and its dependencies.
- name: Gather package facts
  package_facts:
    manager: "auto"

- name: Install GitLab dependencies
  package:
    name: "{{ gitlab_dependencies }}"
    state: present
  when: gitlab_install_dependencies|bool

- name: Install GitLab dependencies (Debian)
  apt:
    name: "{{ gitlab_dependencies_debian }}"
    state: present
  when: gitlab_install_dependencies|bool and ansible_os_family == 'Debian'

- name: Check GitLab dependencies
  fail:
    msg: "GitLab dependency {{item}} is not installed."
  when: item not in ansible_facts.packages
  loop: "{{ gitlab_dependencies }}"

- name: Check GitLab dependencies (Debian)
  fail:
    msg: "GitLab dependency {{item}} is not installed."
  when: ansible_os_family == 'Debian' and item not in ansible_facts.packages
  loop: "{{ gitlab_dependencies_debian }}"

- name: Download GitLab repository installation script
  get_url:
    url: "{{ gitlab_repository_installation_script_url }}"
    dest: /tmp/gitlab_install_repository.sh
    validate_certs: "{{ gitlab_download_validate_certs }}"
  when: not gitlab_file.stat.exists and gitlab_install_repository|bool

- name: Install GitLab repository
  command: bash /tmp/gitlab_install_repository.sh
  register: output
  when: not gitlab_file.stat.exists and gitlab_install_repository|bool

- name: Define the Gitlab package name
  set_fact:
    gitlab_package_name: "{{ gitlab_edition }}{{ gitlab_package_version_separator }}{{ gitlab_version }}"
  when: gitlab_version | default(false)

- name: Generate random password
  set_fact:
    root_pass: "{{ lookup('password', '/dev/null length=32 chars=ascii_letters,digits') }}"
  when: not gitlab_file.stat.exists

- name: Install GitLab
  package:
    name: "{{ gitlab_package_name | default(gitlab_edition) }}"
    state: present
  async: 300
  poll: 5
  when: not gitlab_file.stat.exists

- name: Reconfigure GitLab (first run)
  command: >
    gitlab-ctl reconfigure
    creates=/var/opt/gitlab/bootstrapped
  environment:
    GITLAB_ROOT_PASSWORD: "{{ root_pass }}"
  failed_when: false

- name: Create GitLab SSL configuration folder
  file:
    path: /etc/gitlab/ssl
    state: directory
    owner: root
    group: root
    mode: 0700
  when: gitlab_self_signed_cert_enable|bool

- name: Create self-signed certificate
  command: >
    openssl req -new -nodes -x509 -subj "{{ gitlab_self_signed_cert_subj }}"
    -days {{ gitlab_self_signed_cert_days }}
    -keyout {{ gitlab_ssl_certificate_key }} -out {{ gitlab_ssl_certificate }} -extensions v3_ca
    -addext "subjectAltName={{ gitlab_self_signed_cert_san }}"
    -addext "extendedKeyUsage=serverAuth,clientAuth"
    creates={{ gitlab_ssl_certificate }}
  when: gitlab_self_signed_cert_enable|bool

- name: Copy GitLab configuration file
  template:
    src: "{{ gitlab_config_template }}"
    dest: /etc/gitlab/gitlab.rb
    owner: root
    group: root
    mode: 0600
  notify: restart gitlab

- name: Create GitLab crontab
  template:
    src: "{{ gitlab_crontab_template }}"
    dest: /etc/cron.d/gitlab
    owner: root
    group: root
    mode: 0640

- name: Setup GitLab user
  user:
    name: git
    password: "*"
    update_password: always

- name: Install GitLab sshd - create config directory
  file:
    path: "{{ gitlab_sshd_config_path }}"
    state: directory
    owner: root
    group: root
    mode: 0755
  when: gitlab_sshd_enable|bool

- name: Install GitLab sshd - create config file
  template:
    src: "{{ gitlab_sshd_template }}"
    dest: "{{ gitlab_sshd_config_path }}/sshd_gitlab"
    owner: root
    group: root
    mode: 0440
    validate: /usr/sbin/sshd -t -f "%s"
  when: gitlab_sshd_enable|bool

- name: Install GitLab sshd - create moduli file
  copy:
    remote_src: yes
    src: "/etc/ssh/moduli"
    dest: "{{ gitlab_sshd_config_path }}/moduli"
    owner: root
    group: root
    mode: preserve
  when: gitlab_sshd_enable|bool

- name: Install GitLab sshd - create host keys
  command:
    cmd: ssh-keygen -q -f "{{ item }}" -N '' -t "{{ 'ed25519' if 'ed25519' in item else 'ecdsa' if 'ecdsa' in item else 'rsa' }}"
    creates: "{{ item }}"
  when: gitlab_sshd_enable|bool
  loop: "{{ gitlab_sshd_host_keys }}"

- name: Install GitLab sshd - create service
  template:
    src: "gitlab-sshd-service.j2"
    dest: /etc/systemd/system/ssh-gitlab.service
    force: yes
    owner: root
    group: root
    mode: 0644
  when: gitlab_sshd_enable|bool

- name: Install GitLab sshd - enable service
  systemd:
    name: ssh-gitlab
    enabled: yes
    state: restarted
    daemon_reload: yes
  when: gitlab_sshd_enable|bool

- name: Remove GitLab sshd - stop service
  systemd:
    name: ssh-gitlab
    enabled: no
    state: stopped
  when: not gitlab_sshd_enable|bool

- name: Remove GitLab sshd - remove config file
  file:
    path: "{{ gitlab_sshd_config_path }}/sshd_gitlab"
    state: absent
  when: not gitlab_sshd_enable|bool

- name: Remove GitLab sshd - remove config directory
  file:
    path: "{{ gitlab_sshd_config_path }}"
    state: absent
  when: not gitlab_sshd_enable|bool

- name: Remove GitLab sshd - remove service
  file:
    path: /etc/systemd/system/ssh-gitlab.service
    state: absent
  when: not gitlab_sshd_enable|bool

- name: Remove GitLab sshd - reload systemd
  systemd:
    daemon_reload: yes
  when: not gitlab_sshd_enable|bool
